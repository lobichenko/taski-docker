# .github/workflows/main.yml
name: Main Taski workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        # Если этой строки не будет, то тесты могут запуститься раньше, чем сервер PostgreSQL
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    # Копируем код проекта
    - name: Check out code
      uses: actions/checkout@v3
    # Устанавливаем Python с помощью action
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    # устанавливаем зависимости проекта
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r ./backend/requirements.txt
    # Запускаем тесты для flake8,  django с БД сервер PostgreSQL
    - name: Test with flake8 and django tests
      env:
        POSTGRES_USER: django_user
        POSTGRES_PASSWORD: django_password
        POSTGRES_DB: django_db
        # Сервер БД запущен в Docker, но его порт проброшен на хост
        # Поэтому подключаемся к 127.0.0.1:5432
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
      run: |
        python -m flake8 backend/
        cd backend/
        python manage.py test
  # Собрать и отправить образ приложения на Docker Hub
  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests  # Не выполнять сразу, ждать, пока выполнится tests
    steps:
        # Получение исходного кода из репозитория
      - name: Check out the repo
        uses: actions/checkout@v3
        # Установка сборщика контейнеров Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        # Авторизация на Docker Hub
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        # Одновременный билд и пуш образа в Docker Hub
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          # Параметр context: ./backend/ указывает, что нужный Dockerfile 
          # находится в ./backend/
          context: ./backend/
          # Параметр push: true указывает, что образ нужно не только собрать,
          # но и отправить на Docker Hub
          push: true
          # В параметре tags задаётся название и тег для образа.
          # Для каждого пересобранного образа 
          # устанавливаем тег latest, чтобы потом
          # на сервере и в docker-compose.yml не указывать версию
          tags: ${{ secrets.DOCKER_USERNAME }}/taski_backend:latest
